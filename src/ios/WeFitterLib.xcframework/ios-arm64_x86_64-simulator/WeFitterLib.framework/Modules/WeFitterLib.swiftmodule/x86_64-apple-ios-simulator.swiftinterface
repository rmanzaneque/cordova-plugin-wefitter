// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target x86_64-apple-ios11.3-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name WeFitterLib
import Foundation
import HealthKit
import Swift
@_exported import WeFitterLib
import _Concurrency
import os.log
import os
public enum WeFitterHealthKitError : Swift.Error {
  case authorizationNotGranted(description: Swift.String)
  case apiURLNotValid
  case configAlreadySet
  case bridgeCouldNotBeSetUp
  case HealthKitStoreNotAvailable
  case couldNotStartHealthKitQuery
  case invalidHost
  case invalidScheme
  case couldNotCreateProfile
  case noProfileIdProvided
  case noTokenAvailableFor(profileId: Swift.String)
  case invalidToken(token: Swift.String)
}
extension WeFitterLib.WeFitterHealthKitError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public typealias BridgeCompletionHandler = (Swift.Bool, WeFitterLib.WeFitterHealthKitError?) -> Swift.Void
public typealias ProfileCompletionHandler = (Swift.Bool, WeFitterLib.Profile?, WeFitterLib.WeFitterHealthKitError?) -> Swift.Void
@objc public class WeFitterConfig : ObjectiveC.NSObject {
  @objc public init(url: Swift.String, clientId: Swift.String = "", clientSecret: Swift.String = "", startDate: Foundation.Date? = nil)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class WeFitter : ObjectiveC.NSObject {
  @objc(setupWithConfig:error:) public static func _setup(with config: WeFitterLib.WeFitterConfig) throws
  public static func setup(with config: WeFitterLib.WeFitterConfig) throws
  @objc(applyConfig:error:) public static func _apply(config: WeFitterLib.WeFitterConfig) throws
  public static func apply(config: WeFitterLib.WeFitterConfig) throws
  @objc public static var canConnectToHealthData: Swift.Bool {
    @objc get
  }
  @objc(connectBearerToken:completion:) public static func _connect(bearerToken: Swift.String, completion: @escaping (Swift.Bool, Foundation.NSError?) -> Swift.Void)
  public static func connect(bearerToken: Swift.String, completion: @escaping WeFitterLib.BridgeCompletionHandler)
  @objc public static func disconnect()
  @objc(Status) public enum _Status : Swift.Int {
    case notConfigured
    case disconnected
    case connected
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum Status {
    case notConfigured
    case disconnected
    case connected(profile: WeFitterLib.Profile)
  }
  @objc(currentStatus) public static var _currentStatus: WeFitterLib.WeFitter._Status {
    @objc get
  }
  @objc public static var currentlyConnectedProfile: WeFitterLib.Profile? {
    @objc get
  }
  public static var currentStatus: WeFitterLib.WeFitter.Status {
    get
  }
  @objc deinit
}
@objc public enum Gender : Swift.Int, Swift.Codable {
  case M = 0
  case F = 1
  case X = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class Team : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let name: Swift.String
  @objc final public let url: Swift.String
  @objc final public let members: [WeFitterLib.Profile]
  @objc final public let numberOfMembers: Swift.Int
  public init(name: Swift.String, url: Swift.String, members: [WeFitterLib.Profile] = [], numberOfMembers: Swift.Int = 0)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc public class Profile : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let id: Swift.String?
  @objc final public let url: Swift.String?
  @objc final public let givenName: Swift.String?
  @objc final public let familyName: Swift.String?
  @objc final public let nickName: Swift.String?
  final public let gender: WeFitterLib.Gender?
  @objc final public let birthDate: Foundation.Date?
  @objc final public let zoneInfo: Swift.String?
  @objc final public let locale: Swift.String?
  @objc final public let reference: Swift.String?
  @objc final public let team: WeFitterLib.Team?
  @objc final public let bearer: Swift.String?
  public init(id: Swift.String? = nil, url: Swift.String? = nil, givenName: Swift.String? = nil, familyName: Swift.String? = nil, nickName: Swift.String? = nil, gender: WeFitterLib.Gender? = nil, birthDate: Foundation.Date? = nil, zoneInfo: Swift.String? = nil, locale: Swift.String? = nil, reference: Swift.String? = nil, team: WeFitterLib.Team? = nil, bearer: Swift.String? = nil)
  public init?(from data: Foundation.Data)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension WeFitterLib.WeFitter._Status : Swift.Equatable {}
extension WeFitterLib.WeFitter._Status : Swift.Hashable {}
extension WeFitterLib.WeFitter._Status : Swift.RawRepresentable {}
extension WeFitterLib.Gender : Swift.Equatable {}
extension WeFitterLib.Gender : Swift.Hashable {}
extension WeFitterLib.Gender : Swift.RawRepresentable {}
